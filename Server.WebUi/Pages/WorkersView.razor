@using Hearty.Scheduling
@using Microsoft.Extensions.Logging

@inherits TimedRefreshComponent
@inject ILogger<WorkersView> _logger
@inject DisplaySpecialization _displaySpecialization
@inject WorkerDistribution<PromisedWork, PromiseData> _workerDistribution
@inject NavigationManager _navigationManager

<Grid Items="@_workerDistribution.Values">

    <PropertyColumn Title="Worker Name"
                    Property="@(worker => worker.Name)" />

    <PropertyColumn Title="Capacity"
                    Property="@(worker => worker.AvailableResources)" />

    <TemplateColumn Title="Disconnect">
        @if (@context is IAsyncDisposable disposable)
        {
            <button @onclick="() => disposable.DisposeAsync()">🗙</button>    
        }
    </TemplateColumn>
</Grid>

@if (IsHostCreationEnabled)
{
    <div class="create-workers">

        <table>
            <tr>
                <th>Number of workers</th>
                <td><input type="number" id="concurrency" min="1" max="50" step="1"
                            @bind="@InputNumberOfWorkers" /></td>
            </tr>
            <tr>
                <th>Degree of concurrency</th>
                <td><input type="number" id="concurrency" min="1" max="50" step="1"
                            @bind="@InputConcurrency" /></td>
            </tr>
        </table>

        <p>
            <button class="btn btn-primary" @onclick="GenerateWorkersAsync">
                Generate new workers
            </button>
        </p>

    </div>
}
