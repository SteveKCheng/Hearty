@using Microsoft.AspNetCore.Components.Rendering
@using System.Linq.Expressions
@using Hearty.Server.WebUi.Infrastructure

@typeparam TGridItem

@inject IJSRuntime JS
@{
    _columns.Clear();
}

<CascadingValue IsFixed="true" Value="@((IGrid<TGridItem>)this)">
    @ChildContent
    <Defer>
        <table aria-rowcount="@_rowCount" @ref="_tableReference" @onclosecolumnoptions="CloseColumnOptions">
            <thead>
                <tr>
                    @RenderColumnHeaders
                </tr>
            </thead>
            <tbody>
                @if (Virtualize)
                {
                    <Virtualize @ref="@_virtualizeComponent"
                        TItem="KeyValuePair<int, TGridItem>"
                        ItemSize="@ItemSize"
                        ItemsProvider="@ProvideVirtualizedItems"
                        ItemContent="@(item => builder => RenderRow(builder, item.Key, item.Value))" />
                }
                else
                {
                    @RenderRows
                }
            </tbody>
        </table>
    </Defer>
</CascadingValue>

@code {

    /// <summary>
    /// Renders one row in the grid whenever it is requested by display virtualization.
    /// </summary>
    private void RenderRow(RenderTreeBuilder __builder, int rowIndex, TGridItem item)
    {
        <tr @key="@(ItemKey(item))" aria-rowindex="@rowIndex">
            @foreach (var col in _columns)
            {
                <td class="@GetCssColumnClass(col)" @key="@col">@col.CellContent(item)</td>
            }
        </tr>
    }

    private void RenderColumnHeaders(RenderTreeBuilder builder)
    {
        foreach (var col in _columns)
        {
            RenderColumnHeader(builder, col);
        }
    }

    private void RenderColumnHeader(RenderTreeBuilder __builder, ColumnDefinition<TGridItem> col)
    {
        <th class="@ColumnHeaderClass(col)" aria-sort="@AriaSortValue(col)" @key="@col" scope="col">
            <div class="column-title-flex">
                @if (col.CanSort)
                {
                    <button class="column-title sortable" @onclick="@(() => OnHeaderClicked(col))">
                        <span class="sort-indicator" aria-hidden="true"></span>
                        <div class="title-text">@col.HeaderContent</div>
                    </button>
                }
                else
                {
                    <div class="column-title">
                        <div class="title-text">@col.HeaderContent</div>
                    </div>
                }

                @if (col.ColumnOptions is not null)
                {
                    <button class="column-options-button" @onclick="@(() => OnColumnOptionsButtonClicked(col))"></button>
                }
            </div>

            @if (col == _displayOptionsForColumn)
            {
                <div class="column-options">
                    @col.ColumnOptions
                </div>
            }

            @if (ResizableColumns)
            {
                <div class="column-width-draghandle"></div>
            }
        </th>
    }
}
