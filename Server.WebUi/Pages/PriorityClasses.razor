@page "/priority-classes"
@using Hearty.Common
@using Hearty.Scheduling

@inject IJobQueueSystem _jobQueues
@inject TimeoutProvider _timeoutProvider
@inject DisplaySpecialization _displaySpecialization

<h1>Priority classes</h1>

@{
    List<KeyValuePair<JobQueueKey, 
                      IReadOnlyList<IRunningJob<PromisedWork>>>>? displayedQueues = null;
}

<table class="job-queue">
    <colgroup>
        <col class="client" />
        <col class="count" />
        <col class="time" />
    </colgroup>

    <thead>
        <tr>
            <th>Client</th>
            <th>Job Count</th>
            <th>Time Taken (s)</th>
        </tr>
    </thead>

    @for (int i = _jobQueues.PriorityClassesCount; i > 0; --i)
    {
        <tbody>
            <tr class="priority-class">
                <th>Priority Class @(i-1)</th>
                <th>Weight @_jobQueues.GetPriorityClassWeight(i-1)</th>
                <th><i>(label)</i></th>
            </tr>

            @foreach (var (key, queue) in _jobQueues.GetClientQueues(i-1)
                                                    .OrderBy(item => item.Key))
            {
                var stats = queue.CompletionStatistics;
                var seconds = (double)stats.CumulativeCharge / 1000.0;

                var jobs = ShouldDisplayInDetail(key) ? queue.GetCurrentJobs() : null;
                var jobsCount = jobs?.Count ?? queue.Count;

                if (jobs is not null)
                {
                    displayedQueues ??= new();
                    displayedQueues.Add(KeyValuePair.Create(key, jobs));
                }

                <tr class="job-queue">
                    <td>@key.Owner</td>
                    <td>@jobsCount</td>
                    <td>
                        @seconds.ToString("F3")
                        <a @onclick="() => AddToDetailDisplay(key)">(+)</a>
                    </td>
                </tr>
            }
        </tbody>
    }
</table>

@if (displayedQueues is not null)
{
    <table class="job-queue">
        <colgroup>
            <col class="client" />
            <col class="client" />
            <col class="client" />

            @foreach (var name in _displaySpecialization.JobCustomProperties)
            {
                <col class="client" />
            }
        </colgroup>

        <thead>
            <tr>
                <th>Status</th>
                <th>Client</th>
                <th>ID</th>

                @foreach (var name in _displaySpecialization.JobCustomProperties)
                {
                    <th>@name</th>
                }
            </tr>
        </thead>

        <tbody>
            @foreach (var (key, jobs) in displayedQueues)
            {
                @foreach (var job in jobs)
                {
                    <tr>
                        <td>@GetStatusString(job.Status)</td>
                        <td>@key.Owner</td>
                        <td>@job.Input.Promise?.Id</td>

                        @foreach (var name in _displaySpecialization.JobCustomProperties)
                        {
                            <td>@job.Input.GetDisplayProperty(name)?.ToString()</td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
}

