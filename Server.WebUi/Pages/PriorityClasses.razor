@page "/ui/priority-classes"
@using Hearty.Common
@using Hearty.Scheduling

@inherits TimedRefreshComponent

@inject IJobQueueSystem _jobQueues
@inject DisplaySpecialization _displaySpecialization

<h1>Priority classes</h1>

@{
    List<DisplayedJob>? displayedJobs = null;
}

<div class="content">

<table class="job-queue">
    <colgroup>
        <col class="checkbox" />
        <col class="client" />
        <col class="cohort" />
        <col class="count" />
        <col class="time" />
    </colgroup>

    <thead>
        <tr>
            <th><span class="oi oi-list" title="Show details"></span></th>
            <th>Client</th>
            <th>Cohort</th>
            <th>Job Count</th>
            <th>Time Taken (s)</th>
        </tr>
    </thead>

    @for (int i = _jobQueues.PriorityClassesCount; i > 0; --i)
    {
        <tbody>
            <tr class="priority-class" @key="@(i-1)">
                <td>
                </td>
                <th colspan="2">Priority Class @(i-1)</th>
                <th>Weight @_jobQueues.GetPriorityClassWeight(i-1)</th>
                <th><i>(label)</i></th>
            </tr>

            @foreach (var (key, queue) in _jobQueues.GetClientQueues(i-1)
                                                    .OrderBy(item => item.Key))
            {
                var stats = queue.CompletionStatistics;
                var seconds = (double)stats.CumulativeCharge / 1000.0;

                var jobs = ShouldDisplayInDetail(key) ? queue.GetCurrentJobs() : null;
                var jobsCount = jobs?.Count ?? queue.Count;

                if (jobs is not null)
                {
                    displayedJobs ??= new();
                    displayedJobs.EnsureCapacity(displayedJobs.Count + jobsCount);
                    
                    for (int ordinal = 0; ordinal < jobsCount; ++ordinal)
                        displayedJobs.Add(new DisplayedJob(key, ordinal, jobs[ordinal]));
                }

                <tr class="job-queue" @key="@queue">
                    <td>
                        <input type="checkbox" @onchange="e => SetDetailDisplay(key, (bool)e.Value)" />
                    </td>
                    <td>@key.Owner</td>
                    <td>@key.Cohort</td>
                    <td>@jobsCount</td>
                    <td>
                        @seconds.ToString("F3")
                    </td>
                </tr>
            }
        </tbody>
    }
</table>

<div class="jobs">
    <h2>Jobs</h2>

    <Grid TGridItem="DisplayedJob"
          ItemKey="@(item => item.Job)"
          Items="@displayedJobs"
          ResizableColumns="@true"
          Virtualize="false">

        <PropertyColumn Title="#"
                        Property="@(item => item.Ordinal)"
                        Class="job-ordinal" />

        <PropertyColumn Title="Status" 
                        Property="@(item => GetStatusString(item.Job.Status))" 
                        Class="job-status" />

        <PropertyColumn Title="Client" 
                        Property="@(item => item.Queue.Owner)" 
                        Class="job-client" />

        <PropertyColumn Title="ID"
                        Property="@(item => item.Job.Input.PromiseId)"
                        Class="job-id" />

        @foreach (var name in _displaySpecialization.JobCustomProperties)
        {
            <PropertyColumn Title="@name"
                            Property="@(item => item.Job.Input.GetDisplayProperty(name))" />
        }

        <TemplateColumn Title="Kill"
                        Class="job-kill">
            @if (@context.Job is IJobCancellation cancellableJob)
            {
                <button @onclick="() => cancellableJob.Kill(background: true)">🗙</button>
            }
        </TemplateColumn>
    </Grid>

</div>

</div>
